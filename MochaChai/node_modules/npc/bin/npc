#!/usr/bin/env node
'use strict';

var path = require('path');
var fs = require('fs');
var parseArgs = require('minimist');
var recluster = require('recluster');
var startup = require('../lib/startup.js');

var args = parseArgs(process.argv.slice(2));
var timeout = parseInt(args.t) || 30;
var workers = parseInt(args.w) || 1;
var restart = args.r && path.join(process.cwd(), args.r) || '';
var appPath = args._[0] && path.join(process.cwd(), args._[0]) || '';

console.log('[npc] starting app at: %s', appPath);
console.log('[npc] validating application...');

startup.init(appPath, function (err, app) {
    if (err) throw err;

    var cluster = recluster(path.join(appPath, app.start), {
        args: app.args,
        readyWhen: 'started',
        timeout: timeout,
        workers: workers
    });

    console.log('[npc] found app entry point at: %s', path.join(appPath, app.start));
    console.log('[npc] starting cluster with %d worker(s), %ds timeout', workers, timeout);
    cluster.run();

    var restartFile = fs.watch(restart);
    restartFile.on('change', function (event) {
        console.log('[npc] reloading cluster');
        cluster.reload();
    });
});
